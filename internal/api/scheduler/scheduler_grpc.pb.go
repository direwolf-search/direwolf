// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: scheduler.proto

package scheduler

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SchedulerApiServiceClient is the client API for SchedulerApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SchedulerApiServiceClient interface {
	// returns list of scheduled tasks
	GetScheduled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduledResponse, error)
	// removes task from execution list
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type schedulerApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSchedulerApiServiceClient(cc grpc.ClientConnInterface) SchedulerApiServiceClient {
	return &schedulerApiServiceClient{cc}
}

func (c *schedulerApiServiceClient) GetScheduled(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetScheduledResponse, error) {
	out := new(GetScheduledResponse)
	err := c.cc.Invoke(ctx, "/scheduler.SchedulerApiService/GetScheduled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *schedulerApiServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/scheduler.SchedulerApiService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchedulerApiServiceServer is the server API for SchedulerApiService service.
// All implementations must embed UnimplementedSchedulerApiServiceServer
// for forward compatibility
type SchedulerApiServiceServer interface {
	// returns list of scheduled tasks
	GetScheduled(context.Context, *emptypb.Empty) (*GetScheduledResponse, error)
	// removes task from execution list
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	mustEmbedUnimplementedSchedulerApiServiceServer()
}

// UnimplementedSchedulerApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSchedulerApiServiceServer struct {
}

func (UnimplementedSchedulerApiServiceServer) GetScheduled(context.Context, *emptypb.Empty) (*GetScheduledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetScheduled not implemented")
}
func (UnimplementedSchedulerApiServiceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedSchedulerApiServiceServer) mustEmbedUnimplementedSchedulerApiServiceServer() {}

// UnsafeSchedulerApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SchedulerApiServiceServer will
// result in compilation errors.
type UnsafeSchedulerApiServiceServer interface {
	mustEmbedUnimplementedSchedulerApiServiceServer()
}

func RegisterSchedulerApiServiceServer(s grpc.ServiceRegistrar, srv SchedulerApiServiceServer) {
	s.RegisterService(&SchedulerApiService_ServiceDesc, srv)
}

func _SchedulerApiService_GetScheduled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerApiServiceServer).GetScheduled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerApiService/GetScheduled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerApiServiceServer).GetScheduled(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _SchedulerApiService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchedulerApiServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/scheduler.SchedulerApiService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchedulerApiServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SchedulerApiService_ServiceDesc is the grpc.ServiceDesc for SchedulerApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SchedulerApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scheduler.SchedulerApiService",
	HandlerType: (*SchedulerApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetScheduled",
			Handler:    _SchedulerApiService_GetScheduled_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _SchedulerApiService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "scheduler.proto",
}
